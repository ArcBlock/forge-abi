# Code generated by protoc-gen-gogql. DO NOT EDIT
# source: service.proto

directive @oneof(name: String) on INPUT_FIELD_DEFINITION

scalar Any

scalar Bytes

scalar Float32

scalar Int32

scalar Int64

scalar Uint32

scalar Uint64

# map with key: 'String' and value: 'String'
scalar ChainInfo_ForgeAppsVersionEntry

# map with key: 'String' and value: 'DelegateOpState'
scalar DelegateState_OpsEntry

# map with key: 'String' and value: 'AccountConfig'
scalar ForgeState_AccountConfigEntry

# map with key: 'String' and value: 'Uint32'
scalar ForgeState_GasEntry

# map with key: 'Uint32' and value: 'StakeSummary'
scalar ForgeState_StakeSummaryEntry

# map with key: 'Uint64' and value: 'UpgradeTasks'
scalar ForgeState_TasksEntry

# map with key: 'String' and value: 'String'
scalar NodeInfo_ForgeAppsVersionEntry

input AddressFilterInput {
	sender: String
	receiver: String
	direction: Direction
}

input ByDayInput {
	startDate: String
	endDate: String
}

input ByHourInput {
	date: String
}

input MultisigInput {
	signer: String
	pk: Bytes
	signature: Bytes
	delegator: String
	data: Any
}

input PageInputInput {
	cursor: String
	size: Uint32
	order: [PageOrderInput!]
}

input PageOrderInput {
	field: String
	type: String
}

input RangeFilterInput {
	from: Uint64
	to: Uint64
}

input RequestDeclareNodeInput {
	validator: Boolean
	issuer: String
}

input RequestGetAccountStateInput {
	address: String
	keys: [String!]
	height: Uint64
}

input RequestGetAssetStateInput {
	address: String
	keys: [String!]
	height: Uint64
}

input RequestGetBlockInput {
	height: Uint64
}

input RequestGetBlocksInput {
	paging: PageInputInput
	heightFilter: RangeFilterInput
	emptyExcluded: Boolean
}

input RequestGetConfigInput {
	parsed: Boolean
}

input RequestGetDelegateStateInput {
	address: String
	keys: [String!]
	height: Uint64
}

input RequestGetForgeStateInput {
	keys: [String!]
	height: Uint64
}

input RequestGetForgeStatsInput {
	dayInfo: ByDayInput @oneof(name: "IsRequestGetForgeStatsValue")
	date: ByHourInput @oneof(name: "IsRequestGetForgeStatsValue")
}

input RequestGetSwapStateInput {
	address: String
	keys: [String!]
	height: Uint64
}

input RequestGetSwapStatisticsInput {
	address: String
}

input RequestGetTxInput {
	hash: String
}

input RequestGetUnconfirmedTxsInput {
	paging: PageInputInput
}

input RequestListAccountInput {
	ownerAddress: String
}

input RequestListAssetTransactionsInput {
	paging: PageInputInput
	address: String
}

input RequestListAssetsInput {
	paging: PageInputInput
	ownerAddress: String
}

input RequestListBlocksInput {
	paging: PageInputInput
	proposer: String
	timeFilter: TimeFilterInput
	heightFilter: RangeFilterInput
	numTxsFilter: RangeFilterInput
	numInvalidTxsFilter: RangeFilterInput
}

input RequestListStakesInput {
	paging: PageInputInput
	addressFilter: AddressFilterInput
}

input RequestListSwapInput {
	paging: PageInputInput
	sender: String
	receiver: String
	available: Boolean
}

input RequestListTopAccountsInput {
	paging: PageInputInput
}

input RequestListTransactionsInput {
	paging: PageInputInput
	timeFilter: TimeFilterInput
	addressFilter: AddressFilterInput
	typeFilter: TypeFilterInput
	validityFilter: ValidityFilterInput
}

input RequestSearchInput {
	key: String
	value: String
}

input RequestSendTxInput {
	tx: TransactionInput
	wallet: WalletInfoInput
	token: String
	commit: Boolean
}

input RequestSubscribeInput {
	topic: String
	filter: String
}

input RequestUnsubscribeInput {
	topic: String
}

input TimeFilterInput {
	startDateTime: String
	endDateTime: String
}

input TransactionInput {
	from: String
	nonce: Uint64
	chainId: String
	pk: Bytes
	gas: Uint32
	delegator: String
	signature: Bytes
	signatures: [MultisigInput!]
	itx: Any
}

input TypeFilterInput {
	types: [String!]
}

input ValidityFilterInput {
	validity: Validity
}

input WalletInfoInput {
	type: WalletTypeInput
	sk: Bytes
	pk: Bytes
	address: String
}

input WalletTypeInput {
	pk: KeyType
	hash: HashType
	address: EncodingType
	role: RoleType
}

type BlockID {
	hash: Bytes
	partsHeader: PartSetHeader
}

type Evidence {
	type: String
	validator: abci_vendor_Validator
	height: Int64
	time: Timestamp
	totalVotingPower: Int64
}

type Header {
	version: Version
	chainId: String
	height: Int64
	time: Timestamp
	numTxs: Int64
	totalTxs: Int64
	lastBlockId: BlockID
	lastCommitHash: Bytes
	dataHash: Bytes
	validatorsHash: Bytes
	nextValidatorsHash: Bytes
	consensusHash: Bytes
	appHash: Bytes
	lastResultsHash: Bytes
	evidenceHash: Bytes
	proposerAddress: Bytes
}

type KVPair {
	key: Bytes
	value: Bytes
}

type LastCommitInfo {
	round: Int32
	votes: [VoteInfo!]
}

type PartSetHeader {
	total: Int32
	hash: Bytes
}

type PubKey {
	type: String
	data: Bytes
}

type RequestBeginBlock {
	hash: Bytes
	header: Header
	lastCommitInfo: LastCommitInfo
	byzantineValidators: [Evidence!]
}

type RequestEndBlock {
	height: Int64
}

type abci_vendor_Validator {
	address: Bytes
	power: Int64
}

type Version {
	block: Uint64
	app: Uint64
}

type VoteInfo {
	validator: abci_vendor_Validator
	signedLastBlock: Boolean
}

type AbciServerStatus {
	abciConsensus: String
	abciInfo: String
}

type AccountConfig {
	address: String
	pk: Bytes
	balance: BigUint
}

type AccountState {
	balance: BigUint
	nonce: Uint64
	numTxs: Uint64
	address: String
	pk: Bytes
	type: WalletType
	moniker: String
	context: StateContext
	issuer: String
	gasBalance: BigUint
	migratedTo: [String!]
	migratedFrom: [String!]
	numAssets: Uint64
	stake: StakeContext
	pinnedFiles: CircularQueue
	poke: PokeInfo
	depositReceived: BigUint
	withdrawItems: CircularQueue
	data: Any
}

type AssetState {
	address: String
	owner: String
	moniker: String
	readonly: Boolean
	transferrable: Boolean
	ttl: Uint32
	consumedTime: Timestamp
	issuer: String
	parent: String
	stake: StakeContext
	context: StateContext
	data: Any
}

type BigUint {
	value: Bytes
}

type BlockInfo {
	height: Uint64
	numTxs: Uint32
	time: Timestamp
	appHash: Bytes
	proposer: Bytes
	txs: [TransactionInfo!]
	totalTxs: Uint64
	invalidTxs: [TransactionInfo!]
	txsHashes: [String!]
	invalidTxsHashes: [String!]
	consensusHash: Bytes
	dataHash: Bytes
	evidenceHash: Bytes
	lastCommitHash: Bytes
	lastResultsHash: Bytes
	nextValidatorsHash: Bytes
	validatorsHash: Bytes
	version: Version
	lastBlockId: BlockID
}

type BlockInfoSimple {
	height: Uint64
	numTxs: Uint32
	time: Timestamp
	appHash: Bytes
	proposer: Bytes
	totalTxs: Uint64
	txsHashes: [String!]
	invalidTxsHashes: [String!]
	consensusHash: Bytes
	dataHash: Bytes
	evidenceHash: Bytes
	lastCommitHash: Bytes
	lastResultsHash: Bytes
	nextValidatorsHash: Bytes
	validatorsHash: Bytes
	version: Version
	lastBlockId: BlockID
}

type ChainInfo {
	id: String
	network: String
	moniker: String
	consensusVersion: String
	synced: Boolean
	appHash: Bytes
	blockHash: Bytes
	blockHeight: Uint64
	blockTime: Timestamp
	address: String
	votingPower: Uint64
	totalTxs: Uint64
	version: String
	forgeAppsVersion: ChainInfo_ForgeAppsVersionEntry
	supportedTxs: [String!]
}

type CircularQueue {
	items: [Bytes!]
	typeUrl: String
	maxItems: Uint32
	circular: Boolean
	fifo: Boolean
}

type ConsensusParams {
	maxBytes: Uint64
	maxGas: Int64
	maxValidators: Uint32
	maxCandidates: Uint32
	pubKeyTypes: [String!]
	validators: [forge_abi_Validator!]
	validatorChanged: Boolean
	paramChanged: Boolean
}

type ConsensusStatus {
	health: Boolean
	synced: Boolean
	blockHeight: Uint64
}

type CoreProtocol {
	name: String
	address: String
}

type DeclareConfig {
	restricted: Boolean
	hierarchy: Uint32
	cost: BigUint
}

type DelegateConfig {
	deltaInterval: Uint32
	typeUrls: [String!]
}

type DelegateOpState {
	rule: String
	numTxs: Uint64
	numTxsDelta: Uint64
	balance: BigUint
	balanceDelta: BigUint
}

type DelegateState {
	address: String
	ops: DelegateState_OpsEntry
	context: StateContext
	data: Any
}

type DiskSpaceStatus {
	forgeUsage: String
	total: String
}

type ForgeState {
	address: String
	consensus: ConsensusParams
	tasks: ForgeState_TasksEntry
	stakeSummary: ForgeState_StakeSummaryEntry
	version: String
	token: ForgeToken
	txConfig: TransactionConfig
	protocols: [CoreProtocol!]
	gas: ForgeState_GasEntry
	upgradeInfo: UpgradeInfo
	accountConfig: ForgeState_AccountConfigEntry
	tokenSwapConfig: TokenSwapConfig
	data: Any
}

type ForgeStats {
	numBlocks: [Uint64!]
	numTxs: [Uint64!]
	numStakes: [BigUint!]
	numValidators: [Uint32!]
	numAccountMigrateTxs: [Uint64!]
	numCreateAssetTxs: [Uint64!]
	numConsensusUpgradeTxs: [Uint32!]
	numDeclareTxs: [Uint64!]
	numDeclareFileTxs: [Uint64!]
	numExchangeTxs: [Uint64!]
	numStakeTxs: [Uint64!]
	numSysUpgradeTxs: [Uint32!]
	numTransferTxs: [Uint64!]
	numUpdateAssetTxs: [Uint64!]
	numConsumeAssetTxs: [Uint64!]
	numPokeTxs: [Uint64!]
	tps: [Uint32!]
	maxTps: Uint32
	avgTps: Uint32
	avgBlockTime: Float32
}

type ForgeStatus {
	health: Boolean
	abiServer: String
	forgeWeb: String
	abciServer: AbciServerStatus
}

type ForgeToken {
	name: String
	symbol: String
	unit: String
	description: String
	icon: Bytes
	decimal: Uint32
	initialSupply: Uint64
	totalSupply: Uint64
	inflationRate: Uint32
}

type GeoInfo {
	city: String
	country: String
	latitude: Float32
	longitude: Float32
}

type HealthStatus {
	consensus: ConsensusStatus
	network: NetworkStatus
	storage: StorageStatus
	forge: ForgeStatus
}

type IndexedAccountState {
	address: String
	balance: BigUint
	numAssets: Uint64
	numTxs: Uint64
	nonce: Uint64
	genesisTime: String
	renaissanceTime: String
	moniker: String
	migratedFrom: String
	migratedTo: String
	totalReceivedStakes: BigUint
	totalStakes: BigUint
	totalUnstakes: BigUint
	recentNumTxs: [Uint64!]
}

type IndexedAssetState {
	address: String
	owner: String
	genesisTime: String
	renaissanceTime: String
	moniker: String
	readonly: Boolean
	consumedTime: String
	issuer: String
	parent: String
	transferrable: Boolean
	ttl: Uint64
	data: Any
}

type IndexedBlock {
	height: Uint64
	time: String
	proposer: String
	numTxs: Uint64
	numInvalidTxs: Uint64
}

type IndexedStakeState {
	address: String
	balance: BigUint
	sender: String
	receiver: String
	genesisTime: String
	renaissanceTime: String
	message: String
	type: Uint32
}

type IndexedTransaction {
	hash: String
	sender: String
	receiver: String
	time: String
	type: String
	tx: Transaction
	valid: Boolean
	code: StatusCode
}

type Multisig {
	signer: String
	pk: Bytes
	signature: Bytes
	delegator: String
	data: Any
}

type NetInfo {
	listening: Boolean
	listeners: [String!]
	nPeers: Uint32
	peers: [PeerInfo!]
}

type NetworkStatus {
	health: Boolean
	numPeers: Uint32
}

type NodeInfo {
	id: String
	network: String
	moniker: String
	consensusVersion: String
	synced: Boolean
	appHash: Bytes
	blockHash: Bytes
	blockHeight: Uint64
	blockTime: Timestamp
	address: String
	votingPower: Uint64
	totalTxs: Uint64
	version: String
	forgeAppsVersion: NodeInfo_ForgeAppsVersionEntry
	supportedTxs: [String!]
	ip: String
	geoInfo: GeoInfo
	p2PAddress: String
}

type PageInfo {
	cursor: String
	next: Boolean
	total: Uint32
}

type PeerInfo {
	id: String
	network: String
	consensusVersion: String
	moniker: String
	ip: String
	geoInfo: GeoInfo
}

type PokeConfig {
	dailyLimit: Uint64
	amount: Uint64
	enabled: Boolean
}

type PokeInfo {
	dailyLimit: BigUint
	leftover: BigUint
	amount: BigUint
}

type ResponseDeclareNode {
	code: StatusCode
	wallet: WalletInfo
	tx: Transaction
}

type ResponseGetAccountState {
	code: StatusCode
	state: AccountState
}

type ResponseGetAssetState {
	code: StatusCode
	state: AssetState
}

type ResponseGetBlock {
	code: StatusCode
	block: BlockInfo
}

type ResponseGetBlocks {
	code: StatusCode
	page: PageInfo
	blocks: [BlockInfoSimple!]
}

type ResponseGetChainInfo {
	code: StatusCode
	info: ChainInfo
}

type ResponseGetConfig {
	code: StatusCode
	config: String
}

type ResponseGetDelegateState {
	code: StatusCode
	state: DelegateState
}

type ResponseGetForgeState {
	code: StatusCode
	state: ForgeState
}

type ResponseGetForgeStats {
	code: StatusCode
	forgeStats: ForgeStats
}

type ResponseGetHealthStatus {
	code: StatusCode
	healthStatus: HealthStatus
}

type ResponseGetNetInfo {
	code: StatusCode
	netInfo: NetInfo
}

type ResponseGetNodeInfo {
	code: StatusCode
	info: NodeInfo
}

type ResponseGetSwapState {
	code: StatusCode
	state: SwapState
}

type ResponseGetSwapStatistics {
	code: StatusCode
	statistics: SwapStatistics
}

type ResponseGetTx {
	code: StatusCode
	info: TransactionInfo
}

type ResponseGetUnconfirmedTxs {
	code: StatusCode
	page: PageInfo
	unconfirmedTxs: UnconfirmedTxs
}

type ResponseGetValidatorsInfo {
	code: StatusCode
	validatorsInfo: ValidatorsInfo
}

type ResponseListAccount {
	code: StatusCode
	account: IndexedAccountState
}

type ResponseListAssetTransactions {
	code: StatusCode
	page: PageInfo
	transactions: [IndexedTransaction!]
}

type ResponseListAssets {
	code: StatusCode
	page: PageInfo
	assets: [IndexedAssetState!]
}

type ResponseListBlocks {
	code: StatusCode
	page: PageInfo
	blocks: [IndexedBlock!]
}

type ResponseListStakes {
	code: StatusCode
	page: PageInfo
	stakes: [IndexedStakeState!]
}

type ResponseListSwap {
	code: StatusCode
	page: PageInfo
	swap: [SwapState!]
}

type ResponseListTopAccounts {
	code: StatusCode
	page: PageInfo
	accounts: [IndexedAccountState!]
}

type ResponseListTransactions {
	code: StatusCode
	page: PageInfo
	transactions: [IndexedTransaction!]
}

type ResponseSearch {
	code: StatusCode
	txs: [TransactionInfo!]
}

type ResponseSendTx {
	code: StatusCode
	hash: String
}

type ResponseSubscribe {
	code: StatusCode
	value: IsResponseSubscribeValue
}

type ResponseSubscribe_AccountMigrate {
	accountMigrate: Transaction
}

type ResponseSubscribe_AccountState {
	accountState: AccountState
}

type ResponseSubscribe_AcquireAsset {
	acquireAsset: Transaction
}

type ResponseSubscribe_ApproveWithdraw {
	approveWithdraw: Transaction
}

type ResponseSubscribe_AssetState {
	assetState: AssetState
}

type ResponseSubscribe_BeginBlock {
	beginBlock: RequestBeginBlock
}

type ResponseSubscribe_Confirm {
	confirm: Transaction
}

type ResponseSubscribe_ConsensusUpgrade {
	consensusUpgrade: Transaction
}

type ResponseSubscribe_ConsumeAsset {
	consumeAsset: Transaction
}

type ResponseSubscribe_CreateAsset {
	createAsset: Transaction
}

type ResponseSubscribe_Declare {
	declare: Transaction
}

type ResponseSubscribe_Delegate {
	delegate: Transaction
}

type ResponseSubscribe_DelegateState {
	delegateState: DelegateState
}

type ResponseSubscribe_DepositToken {
	depositToken: Transaction
}

type ResponseSubscribe_EndBlock {
	endBlock: RequestEndBlock
}

type ResponseSubscribe_Exchange {
	exchange: Transaction
}

type ResponseSubscribe_ForgeState {
	forgeState: ForgeState
}

type ResponseSubscribe_Poke {
	poke: Transaction
}

type ResponseSubscribe_RetrieveSwap {
	retrieveSwap: Transaction
}

type ResponseSubscribe_RevokeDelegate {
	revokeDelegate: Transaction
}

type ResponseSubscribe_RevokeSwap {
	revokeSwap: Transaction
}

type ResponseSubscribe_RevokeWithdraw {
	revokeWithdraw: Transaction
}

type ResponseSubscribe_SetupSwap {
	setupSwap: Transaction
}

type ResponseSubscribe_Stake {
	stake: Transaction
}

type ResponseSubscribe_SwapState {
	swapState: SwapState
}

type ResponseSubscribe_SysUpgrade {
	sysUpgrade: Transaction
}

type ResponseSubscribe_Topic {
	topic: String
}

type ResponseSubscribe_Transfer {
	transfer: Transaction
}

type ResponseSubscribe_UpdateAsset {
	updateAsset: Transaction
}

type ResponseSubscribe_UpdateConsensusParams {
	updateConsensusParams: Transaction
}

type ResponseSubscribe_UpdateValidator {
	updateValidator: Transaction
}

type ResponseSubscribe_UpgradeNode {
	upgradeNode: Transaction
}

type ResponseSubscribe_WithdrawToken {
	withdrawToken: Transaction
}

type ResponseUnsubscribe {
	code: StatusCode
}

type StakeConfig {
	timeoutGeneral: Uint32
	timeoutStakeForNode: Uint32
}

type StakeContext {
	totalStakes: BigUint
	totalUnstakes: BigUint
	totalReceivedStakes: BigUint
	recentStakes: CircularQueue
	recentReceivedStakes: CircularQueue
}

type StakeSummary {
	totalStakes: BigUint
	totalUnstakes: BigUint
	context: StateContext
}

type StateContext {
	genesisTx: String
	renaissanceTx: String
	genesisTime: Timestamp
	renaissanceTime: Timestamp
}

type StorageStatus {
	health: Boolean
	indexerServer: String
	stateDb: String
	diskSpace: DiskSpaceStatus
}

type SwapState {
	hash: String
	address: String
	hashkey: Bytes
	sender: String
	receiver: String
	value: BigUint
	assets: [String!]
	locktime: Uint32
	hashlock: Bytes
	context: StateContext
}

type SwapStatistics {
	address: String
	lockedValueOut: BigUint
	lockedValueIn: BigUint
	lockedAssetsOut: Uint32
	lockedAssetsIn: Uint32
}

type TokenSwapConfig {
	commissionHolderAddress: String
	commissionRate: Uint32
	revokeCommissionRate: Uint32
	minCommission: BigUint
	maxCommission: BigUint
}

type Transaction {
	from: String
	nonce: Uint64
	chainId: String
	pk: Bytes
	gas: Uint32
	delegator: String
	signature: Bytes
	signatures: [Multisig!]
	itx: Any
}

type TransactionConfig {
	maxAssetSize: Uint32
	maxListSize: Uint32
	maxMultisig: Uint32
	minimumStake: Uint64
	declare: DeclareConfig
	delegate: DelegateConfig
	poke: PokeConfig
	stake: StakeConfig
}

type TransactionInfo {
	tx: Transaction
	height: Uint64
	index: Uint32
	hash: String
	tags: [KVPair!]
	code: StatusCode
	time: Timestamp
}

type UnconfirmedTxs {
	nTxs: Uint32
	txs: [Transaction!]
}

type UpgradeInfo {
	height: Uint64
	version: String
}

type UpgradeTask {
	type: UpgradeType
	dataHash: String
	actions: [UpgradeAction!]
}

type UpgradeTasks {
	item: [UpgradeTask!]
}

type forge_abi_Validator {
	address: String
	power: Uint64
}

type ValidatorInfo {
	address: String
	pubKey: PubKey
	votingPower: Uint64
	proposerPriority: String
	name: String
	geoInfo: GeoInfo
}

type ValidatorsInfo {
	blockHeight: Uint64
	validators: [ValidatorInfo!]
}

type WalletInfo {
	type: WalletType
	sk: Bytes
	pk: Bytes
	address: String
}

type WalletType {
	pk: KeyType
	hash: HashType
	address: EncodingType
	role: RoleType
}

type Timestamp {
	seconds: Int64
	nanos: Int32
}

union IsRequestGetForgeStatsValue =  |

union IsResponseSubscribeValue = ResponseSubscribe_AccountMigrate | ResponseSubscribe_AccountState | ResponseSubscribe_AcquireAsset | ResponseSubscribe_ApproveWithdraw | ResponseSubscribe_AssetState | ResponseSubscribe_BeginBlock | ResponseSubscribe_Confirm | ResponseSubscribe_ConsensusUpgrade | ResponseSubscribe_ConsumeAsset | ResponseSubscribe_CreateAsset | ResponseSubscribe_Declare | ResponseSubscribe_Delegate | ResponseSubscribe_DelegateState | ResponseSubscribe_DepositToken | ResponseSubscribe_EndBlock | ResponseSubscribe_Exchange | ResponseSubscribe_ForgeState | ResponseSubscribe_Poke | ResponseSubscribe_RetrieveSwap | ResponseSubscribe_RevokeDelegate | ResponseSubscribe_RevokeSwap | ResponseSubscribe_RevokeWithdraw | ResponseSubscribe_SetupSwap | ResponseSubscribe_Stake | ResponseSubscribe_SwapState | ResponseSubscribe_SysUpgrade | ResponseSubscribe_Topic | ResponseSubscribe_Transfer | ResponseSubscribe_UpdateAsset | ResponseSubscribe_UpdateConsensusParams | ResponseSubscribe_UpdateValidator | ResponseSubscribe_UpgradeNode | ResponseSubscribe_WithdrawToken

enum Direction {
	mutual
	one_way
	union
}

enum EncodingType {
	base16
	base58
}

enum HashType {
	keccak
	sha3
	sha2
	keccak_384
	sha3_384
	keccak_512
	sha3_512
}

enum KeyType {
	ed25519
	secp256k1
}

enum RoleType {
	role_account
	role_node
	role_device
	role_application
	role_smart_contract
	role_bot
	role_asset
	role_stake
	role_validator
	role_group
	role_tx
	role_any
}

enum StatusCode {
	ok
	invalid_nonce
	invalid_signature
	invalid_sender_state
	invalid_receiver_state
	insufficient_data
	insufficient_fund
	invalid_owner
	invalid_tx
	unsupported_tx
	expired_tx
	too_many_txs
	invalid_lock_status
	invalid_request
	invalid_moniker
	invalid_passphrase
	invalid_multisig
	invalid_wallet
	invalid_chain_id
	consensus_rpc_error
	storage_rpc_error
	noent
	account_migrated
	rpc_connection_error
	unsupported_stake
	insufficient_stake
	invalid_stake_state
	expired_wallet_token
	banned_unstake
	invalid_asset
	invalid_tx_size
	invalid_signer_state
	invalid_forge_state
	expired_asset
	untransferrable_asset
	readonly_asset
	consumed_asset
	invalid_deposit_value
	exceed_deposit_cap
	invalid_deposit_target
	invalid_depositor
	invalid_withdrawer
	invalid_expiry_date
	invalid_deposit
	invalid_custodian
	insufficient_gas
	invalid_swap
	invalid_hashkey
	invalid_delegation
	insufficient_delegation
	invalid_delegation_rule
	invalid_delegation_type_url
	sender_not_authorized
	protocol_not_running
	protocol_not_paused
	protocol_not_activated
	invalid_deactivation
	sender_withdraw_items_full
	withdraw_item_missing
	invalid_withdraw_tx
	invalid_chain_type
	invalid_time
	invalid_subscribe
	invalid_did_type
	invalid_candidate_state
	validator_not_found
	validator_not_changed
	forbidden
	internal
	timeout
}

enum UpgradeAction {
	verify
	backup
	replace
	restart_app
	restart_dfs
	restart_consensus
	restart_p2p
	restart_forge
	rollback_if_fail
	restart_all_if_fail
	crash_if_fail
	drop_address_book
}

enum UpgradeType {
	config_app
	config_forge
	config_dfs
	config_consensus
	config_p2p
	exe_app
	exe_forge
	exe_dfs
	exe_consensus
	exe_p2p
}

enum Validity {
	both
	valid
	invalid
}

type Mutation {
	send_tx(RequestSendTxInput): ResponseSendTx
}

type Query {
	get_tx(RequestGetTxInput): ResponseGetTx
	get_block(RequestGetBlockInput): ResponseGetBlock
	get_blocks(RequestGetBlocksInput): ResponseGetBlocks
	get_unconfirmed_txs(RequestGetUnconfirmedTxsInput): ResponseGetUnconfirmedTxs
	get_chain_info: ResponseGetChainInfo
	get_node_info: ResponseGetNodeInfo
	search(RequestSearchInput): ResponseSearch
	get_net_info: ResponseGetNetInfo
	get_validators_info: ResponseGetValidatorsInfo
	get_config(RequestGetConfigInput): ResponseGetConfig
	unsubscribe(RequestUnsubscribeInput): ResponseUnsubscribe
	get_account_state(RequestGetAccountStateInput): ResponseGetAccountState
	get_asset_state(RequestGetAssetStateInput): ResponseGetAssetState
	get_forge_state(RequestGetForgeStateInput): ResponseGetForgeState
	get_swap_state(RequestGetSwapStateInput): ResponseGetSwapState
	get_delegate_state(RequestGetDelegateStateInput): ResponseGetDelegateState
	declare_node(RequestDeclareNodeInput): ResponseDeclareNode
	get_forge_stats(RequestGetForgeStatsInput): ResponseGetForgeStats
	list_transactions(RequestListTransactionsInput): ResponseListTransactions
	list_assets(RequestListAssetsInput): ResponseListAssets
	list_stakes(RequestListStakesInput): ResponseListStakes
	list_account(RequestListAccountInput): ResponseListAccount
	list_top_accounts(RequestListTopAccountsInput): ResponseListTopAccounts
	list_asset_transactions(RequestListAssetTransactionsInput): ResponseListAssetTransactions
	list_blocks(RequestListBlocksInput): ResponseListBlocks
	get_health_status: ResponseGetHealthStatus
	list_swap(RequestListSwapInput): ResponseListSwap
	get_swap_statistics(RequestGetSwapStatisticsInput): ResponseGetSwapStatistics
}


type Subscription {
	subscribe(RequestSubscribeInput): ResponseSubscribe
}
